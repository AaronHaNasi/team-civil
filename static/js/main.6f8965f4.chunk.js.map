{"version":3,"sources":["components/Map.js","components/Header.js","components/MapWrapper.js","actions/countryActions.js","actions/types.js","components/admin/AdminCountryList.js","components/admin/AdminCountryModal.js","components/admin/AdminNavbar.js","components/admin/Admin.js","reducers/countryReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Map","setTooltipContent","style","margin","width","marginTop","position","projection","data-tip","projectionConfig","scale","geography","geographies","map","geo","key","rsmKey","stroke","strokeWidth","onMouseEnter","NAME","properties","onMouseLeave","default","fill","outline","hover","pressed","Header","props","className","MapWrapper","useState","content","setContent","setItemsLoading","type","AdminCountryList","onDeleteClick","id","deleteCountry","this","getCountry","countries","country","loading","Container","textAlign","Alert","color","fontSize","display","marginRight","Spinner","ListGroup","_id","name","timeout","classNames","ListGroupItem","float","Button","size","onClick","bind","Component","connect","state","dispatch","axios","get","then","res","payload","data","delete","addCountry","post","isOpen","setIsOpen","setName","code","setCode","population","setPopulation","mdRatified","setMdRatified","mdYear","setMdYear","free_speech","setFreeSpeech","fsRestrict","setFsRestrict","fmPresent","setFmPresent","fmRestrict","setFmRestrict","fmYear","setFmYear","rwbRank","setRwbRank","rwbScore","setRwbScore","sources","setSources","toggle","marginBottom","Modal","ModalHeader","ModalBody","Form","onSubmit","e","preventDefault","newCountry","millenium_dec","ratified","year","freedom_speech","present","restrictions","freedom_media","rwb_ranking","rwb_score","FormGroup","Label","for","Input","placeholder","onChange","target","value","selected","min","step","max","block","AdminNavbar","Navbar","dark","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Admin","initialState","combineReducers","action","filter","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6f8965f4.chunk.js","sourcesContent":["import React from \"react\"\n\nimport {\n    ComposableMap,\n    Geographies,\n    Geography,\n  } from \"react-simple-maps\"\n  \n  // url to a valid topojson file\n  const geoUrl =\n    \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\"\n  \n  const Map = ({ setTooltipContent }) => {\n    return (\n      <div style={{margin:\"auto\", width:\"90%\", marginTop: \"0vh\", position:\"absolute\"}}>\n        <ComposableMap\n            projection=\"geoEqualEarth\"\n            data-tip=\"\"\n            projectionConfig={{scale: 170}}\n        >\n          <Geographies geography={geoUrl}>\n            {({geographies}) => geographies.map(geo =>\n              <Geography \n              key={geo.rsmKey} \n              geography={geo} \n              stroke=\"#FFF\" \n              strokeWidth={.5}\n              onMouseEnter={() => {\n                const { NAME } = geo.properties;\n                setTooltipContent(`${NAME}`);\n              }}\n              onMouseLeave={() => {\n                setTooltipContent(\"\");\n              }}\n              style={{\n                default: {\n                  fill: \"#bbd4bb\",\n                  outline: \"none\"\n                },\n                hover: {\n                  fill: \"#5a6e5a\",\n                  outline: \"none\"\n                },\n                pressed: {\n                  fill: \"#abd6ab\",\n                  outline: \"none\"\n                }\n              }}\n              />\n            )}\n          </Geographies>\n        </ComposableMap>\n      </div>\n    )\n  }\n\n  export default Map\n  ","import React from \"react\";\n/*add links*/\n\nexport const Header = (props) => {\n    return (\n\n        <div className=\"header\">\n            <h1 >Global Civil Discourse Map</h1>\n            <p>Comparing Speech, Press, and Information Sharing Practices Internationally</p>\n        </div>\n\n    );\n};\n\nexport default Header","import React, {useState} from \"react\"\nimport ReactTooltip from \"react-tooltip\"\nimport Map from \"./Map\"\nimport Header from \"./Header\"\n\nconst MapWrapper = () => {\n    const [content, setContent] = useState(\"\")\n    return(\n        <div>\n      <Header />\n      <Map setTooltipContent={setContent}/>\n      <ReactTooltip>{content}</ReactTooltip>\n\n      \n    </div>\n    )\n}\n\nexport default MapWrapper","import {GET_COUNTRY, ADD_COUNTRY, DELETE_COUNTRY, ITEMS_LOADING} from \"./types\"\nimport axios from \"axios\"\n\nexport const getCountry = () => dispatch => {\n  dispatch(setItemsLoading())\n  axios.get(\"/api/countries\")\n    .then(res => dispatch({\n        type: GET_COUNTRY,\n        payload: res.data\n    }))\n}\n\nexport const deleteCountry = (id) => dispatch => {\n    axios.delete(`/api/countries/${id}`)\n        .then(res => dispatch({\n            type: DELETE_COUNTRY,\n            payload: id\n        }))\n }\n\n export const addCountry = (country) => dispatch => {\n    axios.post(\"/api/countries\", country)\n        .then(res => dispatch({\n            type: ADD_COUNTRY,\n            payload: res.data\n        }))\n }\n\n export const setItemsLoading = () => {\n     return {\n         type: ITEMS_LOADING\n     }\n }","export const GET_COUNTRY = \"GET_COUNTRY\"\nexport const ADD_COUNTRY = \"ADD_COUNTRY\"\nexport const DELETE_COUNTRY = \"DELETE_COUNTRY\"\nexport const ITEMS_LOADING = \"ITEMS_LOADING\"","import React, { Component } from \"react\"\nimport {Container, ListGroup, Button, ListGroupItem} from \"reactstrap\"\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\"\nimport {connect} from \"react-redux\"\nimport {getCountry, deleteCountry} from \"../../actions/countryActions\"\nimport PropTypes from \"prop-types\"\nimport { Spinner, Alert } from 'reactstrap';\n\nclass AdminCountryList extends Component {\n    \n    componentDidMount() {\n        this.props.getCountry()\n    }\n\n    onDeleteClick = (id) => {\n        this.props.deleteCountry(id)\n    }\n\n    render() {\n\n        const {countries} = this.props.country\n        const {loading} = this.props.country\n        return (\n            <Container>\n\n            {\n            loading ? \n            \n            <div style={{textAlign:\"center\"}}>\n                <Alert color=\"light\">\n                    <span style={{fontSize: 24, display:\"inline-block\", marginRight: 20}}>Loading</span><Spinner color=\"primary\" />\n                </Alert>\n            </div>\n            :\n            \n\n            <ListGroup>\n                <TransitionGroup className=\"country-list\"> \n                    {countries.map(({_id, name}) => (\n                        <CSSTransition key={_id} timeout={500} classNames=\"fade\">\n                            <ListGroupItem>\n                                {name}\n                                <div style={{float: \"right\"}}>\n                                <Button\n                                    className=\"remove-btn\"\n                                    color=\"warning\"\n                                    size=\"sm\"\n                                    \n                                >\n                                    edit\n                                </Button>\n                                <Button\n                                    className=\"remove-btn\"\n                                    color=\"danger\"\n                                    size=\"sm\"\n                                    onClick={this.onDeleteClick.bind(this, _id)}\n                                >\n                                    delete\n                                </Button>\n                                </div>\n                                \n                            </ListGroupItem>\n                                \n                        </CSSTransition>\n                    ))}\n                </TransitionGroup>\n            </ListGroup>\n    }\n        </Container>\n        )\n    }\n}\n\nAdminCountryList.propTypes = {\n    getCountry: PropTypes.func.isRequired,\n    country: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n    country: state.country\n})\n\n\nexport default connect(mapStateToProps, {getCountry, deleteCountry})(AdminCountryList)","import React, {useState} from \"react\"\n\nimport {Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input} from \"reactstrap\"\nimport {connect} from \"react-redux\"\nimport {addCountry} from \"../../actions/countryActions\"\n\nconst AdminCountryModal = (props) => {\n    const [isOpen, setIsOpen] = useState(false)\n    \n    const [name, setName] = useState(\"\")\n    const [code, setCode] = useState(\"\")\n    const [population, setPopulation] = useState(\"\")\n    const [mdRatified, setMdRatified] = useState(true)\n    const [mdYear, setMdYear] = useState(\"\")\n    const [free_speech, setFreeSpeech] = useState(true)\n    const [fsRestrict, setFsRestrict] = useState(\"\")\n    const [fmPresent, setFmPresent] = useState(true)\n    const [fmRestrict, setFmRestrict] = useState(\"\")\n    const [fmYear, setFmYear] = useState(\"\")\n    const [rwbRank, setRwbRank] = useState(0)\n    const [rwbScore, setRwbScore] = useState(0)\n    const [sources, setSources] = useState([])\n\n    const toggle = () => {\n        setIsOpen(!isOpen)\n    }\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n        const newCountry = {\n            name: name,\n            code: code,\n            population: population,\n            millenium_dec: [{\n                ratified: mdRatified,\n                year: mdYear\n            }],\n            freedom_speech: [{\n                present: free_speech,\n                restrictions: fsRestrict\n            }],\n            freedom_media: [{\n                present: fmPresent,\n                restrictions: fmRestrict,\n                year: fmYear\n            }],\n            rwb_ranking: rwbRank,\n            rwb_score: rwbScore,\n            sources: [sources]\n\n        }\n       //console.log(newCountry)\n        props.addCountry(newCountry)\n\n        toggle()\n    }\n\n   \n\n    return (\n        <div>\n            <Button\n                color=\"success\"\n                style={{marginBottom: \"2rem\"}}\n                onClick={toggle}\n            >\n                Add Country\n            </Button>\n            <Modal\n                isOpen={isOpen}\n                toggle={toggle}\n            >\n                <ModalHeader toggle={toggle}>Create New Country</ModalHeader>\n                <ModalBody>\n                    <Form onSubmit={onSubmit}>\n\n                        <FormGroup>\n                            <Label for=\"name\">Country</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"name\"\n                                id=\"name\"\n                                placeholder=\"Name\"\n                                onChange={e => setName(e.target.value)} \n                            />\n                            <br />\n                            <Input\n                                type=\"text\"\n                                name=\"code\"\n                                id=\"code\"\n                                placeholder=\"Country Code\"\n                                onChange={e => setCode(e.target.value)} \n                            />\n                            <br />\n                            <Input\n                                type=\"number\"\n                                name=\"population\"\n                                id=\"population\"\n                                placeholder=\"Population\"\n                                onChange={e => setPopulation(e.target.value)} \n                            />\n                        </FormGroup> \n\n                        <FormGroup>\n                            <Label for=\"md_rat\">Millenium Declaration</Label>\n                            <Input type=\"select\" name=\"md_rat\" id=\"md_rat\" onChange={e => setMdRatified(e.target.value)}>\n                            <option value={true} selected>Yes</option>\n                            <option value={false}>No</option>\n                            </Input>\n                                <br />\n                            <Input\n                                type=\"number\"\n                                name=\"md_year\"\n                                id=\"md_year\"\n                                placeholder=\"Year\"\n                                onChange={e => setMdYear(e.target.value)} \n                            />\n                        </FormGroup> \n\n                        <FormGroup>\n                            <Label for=\"free_speech\">Freedom of Speech</Label>\n                            <Input type=\"select\" name=\"free_speech\" id=\"free_speech\" onChange={e => setFreeSpeech(e.target.value)}>\n                            <option value={true} selected>Yes</option>\n                            <option value={false}>No</option>\n                            </Input>\n                                <br />\n                            <Input\n                                type=\"text\"\n                                name=\"fs_restrictions\"\n                                id=\"fs_restrictions\"\n                                placeholder=\"Restrictions\"\n                                onChange={e => setFsRestrict(e.target.value)} \n                            />\n\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label for=\"free_media\">Freedom of Media</Label>\n                            <Input type=\"select\" name=\"free_media\" id=\"free_media\" onChange={e => setFmPresent(e.target.value)}>\n                            <option value={true} selected>Yes</option>\n                            <option value={false}>No</option>\n                            </Input>\n                            <br />\n                            <Input\n                                type=\"text\"\n                                name=\"fm_restrictions\"\n                                id=\"fm_restrictions\"\n                                placeholder=\"Restrictions\"\n                                onChange={e => setFmRestrict(e.target.value)} \n                            />\n                            <br />\n                            <Input\n                                type=\"number\"\n                                name=\"fm_year\"\n                                id=\"fm_year\"\n                                placeholder=\"Year\"\n                                onChange={e => setFmYear(e.target.value)} \n                            />\n                        </FormGroup>\n\n                        \n                            \n                        \n\n                        <FormGroup>\n                            <Label for=\"rwb_rank\">Reporters Without Borders</Label>\n                            <Input\n                                type=\"number\"\n                                name=\"rwb_rank\"\n                                id=\"rwb_rank\"\n                                placeholder=\"Ranking\"\n                                onChange={e => setRwbRank(e.target.value)} \n                            />\n                            <br />\n\n                            <Input\n                                type=\"number\"\n                                min=\"0.00\"\n                                step=\"0.001\"\n                                max=\"1000.00\"\n                                name=\"rwb_index\"\n                                id=\"rwb_index\"\n                                placeholder=\"Score\"\n                                onChange={e => setRwbScore(e.target.value)} \n                            />\n                        </FormGroup> \n\n                        <FormGroup>\n                            <Label for=\"sources\">Sources</Label>\n                            <Input\n                                type=\"textarea\"\n                                name=\"sources\"\n                                id=\"sources\"\n                                placeholder=\"List links separated by commma\"\n                                onChange={e => setSources(e.target.value)} \n                            />\n                        </FormGroup> \n\n                            <Button\n                                color=\"success\"\n                                style={{marginTop:\"2rem\"}}\n                                block>\n                            Save\n                            </Button>\n\n                    </Form>\n                </ModalBody>\n            </Modal>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    country: state.country\n})\n\nexport default connect(mapStateToProps, {addCountry})(AdminCountryModal)","import React, {useState} from \"react\"\nimport {Collapse, Navbar,Container, NavbarBrand, NavbarToggler} from \"reactstrap\"\n\nconst AdminNavbar = () => {\n    const [isOpen, setIsOpen] = useState(false)\n\n    const toggle = () => setIsOpen(!isOpen);\n\n    return (\n        <div>\n            <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\n                <Container>\n                    <NavbarBrand href=\"/admin\">Admin Dashboard</NavbarBrand>\n                    <NavbarToggler onClick={toggle}/>\n                    <Collapse isOpen={isOpen} navbar>\n                        {/* <Nav className=\"ml-auto\">\n                            <NavItem>\n                                <NavLink href=\"http://google.com\">Google</NavLink>\n                            </NavItem>\n                        </Nav> */}\n                    </Collapse>\n                </Container>\n            </Navbar>\n        </div>\n    )\n}\n\nexport default AdminNavbar","import React, {Component} from \"react\"\nimport {Container} from \"reactstrap\"\nimport AdminCountryList from \"./AdminCountryList\"\nimport AdminCountryModal from \"./AdminCountryModal\"\nimport AdminNavbar from \"./AdminNavbar\"\n\nclass Admin extends Component {\n    \nrender() {\n    return (\n        <div>\n            <AdminNavbar />\n            <Container>\n                <AdminCountryModal />\n                <AdminCountryList />\n            </Container>\n        </div>\n    )\n}\n    \n\n}\nexport default Admin","import {GET_COUNTRY, ADD_COUNTRY, DELETE_COUNTRY, ITEMS_LOADING} from \"../actions/types\"\nconst initialState = {\n    countries: [],\n    loading: false\n}\n\nexport default function(state = initialState, action){\n    switch(action.type){\n        case GET_COUNTRY:\n            return {\n                ...state,\n                countries: action.payload,\n                loading: false\n            }\n        case DELETE_COUNTRY:\n            return{\n                ...state,\n                countries: state.countries.filter(country => country._id !== action.payload)\n            }\n        case ADD_COUNTRY:\n            return {\n                ...state,\n                countries: [action.payload, ...state.countries]\n            }\n        case ITEMS_LOADING:\n            return {\n                ...state,\n                loading: true\n            }\n        default: {\n            return state\n        }\n    }\n}","import {combineReducers} from \"redux\"\nimport countryReducer from \"./countryReducer.js\"\n\nexport default combineReducers({\n    country: countryReducer\n})","import {createStore, applyMiddleware, compose} from \"redux\"\nimport thunk from \"redux-thunk\"\nimport rootReducer from \"./reducers\"\n\nconst initialState = {}\n\nconst middleware = [thunk]\n\nconst store = createStore(rootReducer, initialState, compose(\n    applyMiddleware(...middleware)\n))\n\nexport default store","import React from 'react'\nimport MapWrapper from \"./components/MapWrapper\"\nimport Admin from \"./components/admin/Admin\"\n\n\nimport {Provider} from \"react-redux\"\nimport store from \"./store\"\n\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\"\nimport \"./App.css\"\n\nfunction App() {\n  return (\n    <Provider store={store}>\n       <BrowserRouter>\n      <main>\n        <Switch>\n            <Route path=\"/\" component={MapWrapper} exact />\n            <Route path=\"/admin\" component={Admin} />\n        </Switch>\n      </main>\n    </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {AboutUs} from './components/AboutUs';\n\nReactDOM.render(\n  <React.StrictMode>\n        <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}