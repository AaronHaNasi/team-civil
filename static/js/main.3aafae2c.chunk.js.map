{"version":3,"sources":["components/Map.js","App.js","serviceWorker.js","index.js"],"names":["Map","setTooltipContent","style","margin","width","marginTop","position","projection","data-tip","projectionConfig","scale","geography","geographies","map","geo","key","rsmKey","stroke","strokeWidth","onMouseEnter","NAME","properties","onMouseLeave","default","fill","outline","hover","pressed","App","useState","content","setContent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uQAwDiBA,EA5CH,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBACb,OACE,yBAAKC,MAAO,CAACC,OAAO,OAAQC,MAAM,MAAOC,UAAW,QAASC,SAAS,aACpE,kBAAC,gBAAD,CACIC,WAAW,gBACXC,WAAS,GACTC,iBAAkB,CAACC,MAAO,MAE5B,kBAAC,cAAD,CAAaC,UAVnB,2GAWS,qBAAEC,YAA6BC,KAAI,SAAAC,GAAG,OACrC,kBAAC,YAAD,CACAC,IAAKD,EAAIE,OACTL,UAAWG,EACXG,OAAO,OACPC,YAAa,GACbC,aAAc,WAAO,IACXC,EAASN,EAAIO,WAAbD,KACRnB,EAAkB,GAAD,OAAImB,KAEvBE,aAAc,WACZrB,EAAkB,KAEpBC,MAAO,CACLqB,QAAS,CACPC,KAAM,UACNC,QAAS,QAEXC,MAAO,CACLF,KAAM,UACNC,QAAS,QAEXE,QAAS,CACPH,KAAM,UACNC,QAAS,oB,MC7BZG,MAXf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,KAEb,OACE,6BACE,kDACA,kBAAC,EAAD,CAAK9B,kBAAmB8B,IACxB,kBAAC,IAAD,KAAeD,KCCDE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3aafae2c.chunk.js","sourcesContent":["import React from \"react\"\n\nimport {\n    ComposableMap,\n    Geographies,\n    Geography,\n  } from \"react-simple-maps\"\n  \n  // url to a valid topojson file\n  const geoUrl =\n    \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\"\n  \n  const Map = ({ setTooltipContent }) => {\n    return (\n      <div style={{margin:\"auto\", width:\"90%\", marginTop: \"-14vh\", position:\"absolute\"}}>\n        <ComposableMap\n            projection=\"geoEqualEarth\"\n            data-tip=\"\"\n            projectionConfig={{scale: 170}}\n        >\n          <Geographies geography={geoUrl}>\n            {({geographies}) => geographies.map(geo =>\n              <Geography \n              key={geo.rsmKey} \n              geography={geo} \n              stroke=\"#FFF\" \n              strokeWidth={.5}\n              onMouseEnter={() => {\n                const { NAME } = geo.properties;\n                setTooltipContent(`${NAME}`);\n              }}\n              onMouseLeave={() => {\n                setTooltipContent(\"\");\n              }}\n              style={{\n                default: {\n                  fill: \"#D6D6DA\",\n                  outline: \"none\"\n                },\n                hover: {\n                  fill: \"#004b87\",\n                  outline: \"none\"\n                },\n                pressed: {\n                  fill: \"#006cc2\",\n                  outline: \"none\"\n                }\n              }}\n              />\n            )}\n          </Geographies>\n        </ComposableMap>\n      </div>\n    )\n  }\n\n  export default Map\n  ","import React, {useState} from 'react'\nimport ReactTooltip from \"react-tooltip\"\nimport Map from \"./components/Map\"\nimport \"./App.css\"\n\nfunction App() {\n  const [content, setContent] = useState(\"\")\n  return (\n    <div>\n      <h1>Welcome to our Map</h1>\n      <Map setTooltipContent={setContent}/>\n      <ReactTooltip>{content}</ReactTooltip>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}